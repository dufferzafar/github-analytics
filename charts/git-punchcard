#!/usr/bin/env python

import math
import cairo
import os

import json

top_users = [
    ("torvalds", 5203, -8),
    ("JakeWharton", 896, -5),
    ("Tj", 376498, 0),
    ("addyosmani", 6240, 0),
    ("paulirish", 1779, 0),
    ("mojombo", 9236, 0),
    ("defunkt", 1570, 0),
    ("sindresorhus", 3871, 0),
    ("douglascrockford", 1736, 0),
    ("mbostock", 13009, -8),
    ("jeresig", 24452, 0),
    ("ruanyf", 616741, 0),
    ("daimajia", 2468643, 0),
    ("mattt", 2427, 0),
    ("mdo", 81423, 0),
    ("kennethreitz", 796, -5),
    ("schacon", 10005, 0),
    ("gaearon", 417948, 0),
    ("jlord", 2016667, 0),
    ("visionmedia", 1954, 0),
]

jamians = [
    ("dufferzafar", 1432224, 5),
    ("iCHAIT", 5107602, 5),
    ("TrigonaMinima", 2859386, 5),
    ("nickedes", 6145009, 5),
    ("rootAvish", 2549876, 5),
    ("kwikadi", 4007006, 5),
    ("prerit2010", 4925305, 5),
]

# This data came from spark analysis
# with open("../outputs/commit_punchcard.json") as file:
with open("../outputs/top_users_commit_punchcard.json") as file:
# with open("../outputs/jamians_commit_punchcard.json") as file:
    grouped_data = json.load(file)

days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']

author, author_id, tz_offset = top_users[9]
# author, author_id, tz_offset = jamians[6]

output_file = "commits-punchcard-%s.png" % author

stats = {d: [0] * 24 for d in days}

for r in grouped_data:
    if r['author_id'] == author_id:
        stats[r['day']][r['hour']] = r['commits']

############################################################

# defaults
width = 1100
height = int(round(width/2.75, 0))
# output_file = 'output.png'

# original_path = os.getcwd()
original_path = "../_Help/punchcards/"
opaque = -1

# Calculate the relative distance
distance = int(math.sqrt((width*height)/270.5))

# Round the distance to a number divisible by 2
if distance % 2 == 1:
    distance -= 1

max_range = (distance/2) ** 2

# Good values for the relative position
left = width/18 + 10  # The '+ 10' is to prevent text from overlapping
top = height/20 + 10
indicator_length = height/20

hours = (
    ['12am'] + [str(x) for x in range(1, 12)] +
    ['12noon'] + [str(x) for x in range(1, 12)]
)


def get_x_y_from_date(day, hour):
    y = top + (days.index(day) + 1) * distance
    x = left + ((hour + tz_offset) % 24 + 1) * distance
    return x, y


# No clue what this does
def get_length(nr):
    if nr == 0:
        return 0
    for i in range(1, distance/2):
        if i*i <= nr and nr < (i+1)*(i+1):
            return i
    if nr == max_range:
        return distance/2-1


# normalize
all_values = []
for d, num_commits in stats.items():
    all_values.extend(num_commits)

max_value = max(all_values)

final_data = []

for d, num_commits in stats.items():
    for h, value in enumerate(num_commits):
        final_data.append([get_length(int(float(value) / max_value * max_range)), get_x_y_from_date(d, h)])


surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)
cr = cairo.Context(surface)

cr.set_line_width(1)

# draw background to white
cr.set_source_rgb(1, 1, 1)
cr.rectangle(0, 0, width, height)
cr.fill()

# set black
cr.set_source_rgb(0, 0, 0)

# draw x-axis and y-axis
cr.move_to(left, top)
cr.rel_line_to(0, 8 * distance)
cr.rel_line_to(25 * distance, 0)
cr.stroke()

# draw indicators on x-axis and y-axis
x, y = left, top
for i in range(8):
    cr.move_to(x, y)
    cr.rel_line_to(-indicator_length, 0)
    cr.stroke()
    y += distance

x += distance
for i in range(25):
    cr.move_to(x, y)
    cr.rel_line_to(0, indicator_length)
    cr.stroke()
    x += distance

# select font
cr.select_font_face('sans-serif', cairo.FONT_SLANT_NORMAL,
                    cairo.FONT_WEIGHT_NORMAL)

# and set a appropriate font size
cr.set_font_size(math.sqrt((width*height)/3055.6))

# draw Mon, Sat, ... Sun on y-axis
x, y = (left - 5), (top + distance)
for i in range(7):
    x_bearing, y_bearing, width, height, x_advance, y_advance = cr.text_extents(days[i])
    cr.move_to(x - indicator_length - width, y + height/2)
    cr.show_text(days[i])
    y += distance

# draw 12am, 1, ... 11 on x-axis
x, y = (left + distance), (top + (7 + 1) * distance + 5)
for i in range(24):
    x_bearing, y_bearing, width, height, x_advance, y_advance = cr.text_extents(hours[i])
    cr.move_to(x - width/2 - x_bearing, y + indicator_length + height)
    cr.show_text(hours[i])
    x += distance


# draw circles according to their frequency
def draw_circle(pos, length):
    # find the position
    # max of length is half of the distance
    x, y = pos
    clr = (1 - float(length * length) / max_range)
    if opaque >= 0 and opaque < 1:
        clr = opaque

    # NOTE: Colors get changed here
    cr.set_source_rgba(clr, clr, clr)

    cr.move_to(x, y)
    cr.arc(x, y, length, 0, 2 * math.pi)
    cr.fill()

for each in final_data:
    draw_circle(each[1], each[0])

# write to output
surface.write_to_png(os.path.join(original_path, output_file))

print("punchcard written to output file at: %s" %
      os.path.join(original_path, output_file))
